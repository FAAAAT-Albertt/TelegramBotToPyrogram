import asyncio
import json
import os
from threading import Thread

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (FSInputFile, InlineKeyboardButton,
                           InlineKeyboardMarkup, KeyboardButton, Message,
                           ReplyKeyboardRemove)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.utils.markdown import hbold, hitalic, hlink

import time
import client
import database
from states import SaveInfo, SendText, EnterCode, MultiAnswer


dp = Dispatcher()
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
user_page = {}
@dp.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    try:
        os.remove(f'/session/{message.from_user.username}.session')
    except:
        pass
    try:
        os.remove(f'/session/{message.from_user.username}_true.json')
    except:
        pass
    try:
        os.remove(f'/session/{message.from_user.username}_false.json')
    except:
        pass
    builder = ReplyKeyboardBuilder()
    btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
    builder.row(btn)
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(SaveInfo.send_phone)

@dp.message(SaveInfo.send_phone)
async def phone_user(message: Message, state: FSMContext) -> None:
    await state.update_data(phone = message.contact.phone_number)
    builder = ReplyKeyboardBuilder()
    btn1 = KeyboardButton(text="–î–∞")
    btn2 = KeyboardButton(text="–ù–µ—Ç")
    builder.row(btn1, btn2)
    await message.reply("–ë–æ—Ç –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª!\n–°–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª—å —É –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–∞?", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(SaveInfo.has_pass)

@dp.message(SaveInfo.has_pass)
async def has_pass(message: Message, state: FSMContext) -> None:  
    if message.text == '–î–∞':
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=ReplyKeyboardRemove())
        await state.set_state(SaveInfo.send_pass)
    elif message.text == '–ù–µ—Ç':
        await state.update_data(password = None)
        data_user = await state.get_data()
        await database.insert_user(message.from_user.id,message.from_user.username, data_user)
        await message.reply('–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        new_thread = Thread(target=spam, args=(message.from_user.id,))
        new_thread.start()
        
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
        await state.set_state(EnterCode.first)

@dp.message(SaveInfo.send_pass)
async def update_pass(message: Message, state: FSMContext) -> None:  
    await state.update_data(password = message.text)
    data_user = await state.get_data()
    await database.insert_user(message.from_user.id,message.from_user.username, data_user)
    await message.reply('–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    new_thread = Thread(target=spam, args=(message.from_user.id,))
    new_thread.start()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
    await state.set_state(EnterCode.first)

@dp.message(EnterCode.first)
async def update_pass(message: Message, state: FSMContext) -> None: 
    await message.reply('–ù–∞–±–∏—Ä–∞–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º')

@dp.message(EnterCode.second)
async def update_pass(message: Message, state: FSMContext) -> None: 
    await message.reply('–ù–∞–±–∏—Ä–∞–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º')

@dp.message(EnterCode.third)
async def update_pass(message: Message, state: FSMContext) -> None: 
    await message.reply('–ù–∞–±–∏—Ä–∞–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º')

@dp.message(EnterCode.fourth)
async def update_pass(message: Message, state: FSMContext) -> None: 
    await message.reply('–ù–∞–±–∏—Ä–∞–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º')

@dp.message(EnterCode.fifth)
async def update_pass(message: Message, state: FSMContext) -> None: 
    await message.reply('–ù–∞–±–∏—Ä–∞–π—Ç–µ –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º')

@dp.callback_query(EnterCode.first)
async def first_number(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(code1 = callback.data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
    await state.set_state(EnterCode.second)

@dp.callback_query(EnterCode.second)
async def second_number(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(code2 = callback.data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ—Ç—å—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
    await state.set_state(EnterCode.third)

@dp.callback_query(EnterCode.third)
async def third_number(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(code3 = callback.data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
    await state.set_state(EnterCode.fourth)

@dp.callback_query(EnterCode.fourth)
async def fourth_number(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(code4 = callback.data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—è—Ç—É—é —Ü–∏—Ñ—Ä—É –∫–æ–¥–∞ (–≤–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –∫–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏)', reply_markup=await create_btn())
    await state.set_state(EnterCode.fifth)

@dp.callback_query(EnterCode.fifth)
async def fourth_number(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(code5 = callback.data)
    await callback.message.edit_text('–û–∂–∏–¥–∞–π—Ç–µ, –≤—Ö–æ–¥–∏–º –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç')
    data = await state.get_data()
    code = data['code1'] + data['code2'] + data['code3'] + data['code4'] + data['code5']
    await database.insert_code(callback.from_user.id, code)
    check = await check_result(callback.from_user.username)
    if check == True:
        await callback.message.delete()
        await callback.message.answer('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', reply_markup=await menu_btn())
        await state.clear()
    elif check == "Flood":
        await callback.message.delete()
        await callback.message.answer('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ', reply_markup=await back_btn())
        await state.clear()
    else:
        await database.delete_user(callback.from_user.id)
        await callback.message.answer('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å...', reply_markup=await back_btn())
        await state.clear()

@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def start_bot(message: Message, state: FSMContext):
    try:
        os.remove(f'/session/{message.from_user.username}.session')
    except:
        pass
    try:
        os.remove(f'/session/{message.from_user.username}_true.json')
    except:
        pass
    try:
        os.remove(f'/session/{message.from_user.username}_false.json')
    except:
        pass
    builder = ReplyKeyboardBuilder()
    btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
    builder.row(btn)
    await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(SaveInfo.send_phone)

@dp.message(F.text == "–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
async def chats_user(message: Message):
    text_mes = "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤"
    mes_id = await message.reply(text_mes)
    new_thread = Thread(target=chats, args=(message.from_user.id, False))
    new_thread.start()
    while new_thread.is_alive():
        for i in range(3):
            text = '.' * (i + 1)
            text_mes_edit = text_mes + text
            #await bot.edit_text(text_mes_edit)
            await bot.edit_message_text(text_mes_edit, message.from_user.id, mes_id.message_id)
            time.sleep(0.5)
    new_thread.join()
    file_name = f"chat_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    send = []
    for chat in js[:50]:
        text = ''
        builder = InlineKeyboardBuilder()
        if chat["verif"]:
            text += f'{chat["name"]}üëç\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            send.append(str(chat['id']))
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"approve_{chat['id']}")
        else:
            text += f'{chat["name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{chat['id']}")
        await message.answer(text, reply_markup=builder.as_markup())

    file_name = f"send_{message.from_user.id}.json"
    with open(file_name, 'w+') as file:
        file.write(json.dumps(send))
    builder_reply = ReplyKeyboardBuilder()
    builder_reply.button(text="–†–∞–∑–æ—Å–ª–∞—Ç—å")
    if len(js) > 50:
        user_page[message.from_user.id] = {'page' : 1, 'count_page': len(js) // 50 + 1}
        builder_reply.button(text="–î–∞–ª–µ–µ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.callback_query(F.data.startswith("send_"))
async def callbacks_send(callback: types.CallbackQuery):
    data_call = callback.data.replace('send_', '')
    file_name = f"send_{callback.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    js.append(data_call)
    with open(file_name, 'w') as file:
        file.write(json.dumps(js))
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"approve_{data_call}")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("approve_"))
async def callbacks_approve(callback: types.CallbackQuery):
    data_call = callback.data.replace('approve_', '')
    file_name = f"send_{callback.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    js.remove(data_call)
    with open(file_name, 'w') as file:
        file.write(json.dumps(js))
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{data_call}")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("success_"))
async def callback_verif_or_not(callback: types.CallbackQuery):
    data_call = callback.data.split("success_")[1].strip()
    with open(f"send_contacts_{callback.message.chat}.json", "r") as file:
        js = json.loads(file.read())
    js.remove(data_call)
    with open(f"send_contacts_{callback.message.chat}.json", 'w') as file:
        file.write(json.dumps(js))
        
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"not_success_{data_call}")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("not_success_"))
async def callback_verif_or_not(callback: types.CallbackQuery):
    data_call = callback.data.split("success_")[1].strip()
    with open(f"send_contacts_{callback.message.chat}.json", "r") as file:
        js = json.loads(file.read())
    js.append(data_call)
    with open(f"send_contacts_{callback.message.chat}.json", 'w') as file:
        file.write(json.dumps(js))
        
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"success_{data_call}")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

@dp.message(MultiAnswer.msg)
async def multi_answer_update(message: types.Message, state: FSMContext):
    await state.update_data(msg=message.text)
    await message.reply("–û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
    text = await state.get_data()
    await client.spam_to_contacts(message.from_user.id, text['msg'])
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ—á–Ω–µ–Ω–∞!", reply_markup=await menu_btn())

    
@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–∞—Ç—ã")
async def get_chats_new(message: Message):
    os.remove(f"contacts_{message.from_user.id}.json")
    await client.get_chats(message.from_user.id, True)

@dp.message(F.text == "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º")
async def show_contacts(message: Message, state: FSMContext):
    # await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ")
    # await state.set_state(MultiAnswer.msg)
    await client.get_contacts(message.from_user.id)
    file_name = f"contacts_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    send_contacts = []
    for contact in js[:50]:
        text = ''
        builder = InlineKeyboardBuilder()
        if contact["verif"] == '+':
            text += f'{contact["first_name"]}üëç\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            send_contacts.append(str(contact['contact_id']))
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"success_{contact['contact_id']}")
        else:
            text += f'{contact["first_name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"not_success_{contact['contact_id']}")
        await message.answer(text, reply_markup=builder.as_markup())
    
    file_name = f"send_contacts_{message.from_user.id}.json"
    with open(file_name, 'w+') as file:
        file.write(json.dumps(send_contacts))

    builder_reply = ReplyKeyboardBuilder()
    builder_reply.button(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    if len(js) > 50:
        user_page[message.from_user.id] = {'page' : 1, 'count_page': len(js) // 50 + 1}
        builder_reply.button(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.message(F.text == "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def next_page_contacts(message: Message):
    page = user_page[message.from_user.id]['page']
    next_page = page + 1
    start_index = page * 50
    stop_index = next_page * 50

    file_name = f"contacts_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())

    file_name = f"send_contacts_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        send_contacts = json.loads(file.read())

    for contact in js[start_index:stop_index]:
        text = ''
        builder = InlineKeyboardBuilder()
        if contact["verif"] == "+":
            text += f'{contact["first_name"]}üëç\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            send_contacts.append(str(contact['contact_id']))
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"success_{contact['contact_id']}")
        else:
            text += f'{contact["first_name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"not_success_{contact['contact_id']}")
        await message.answer(text, reply_markup=builder.as_markup())

    file_name = f"send_contacts_{message.from_user.id}.json"
    with open(file_name, 'w+') as file:
        file.write(json.dumps(send_contacts))

    builder_reply = ReplyKeyboardBuilder()
    user_page[message.from_user.id] = {'page' : next_page, 'count_page': len(js) // 50 + 1}
    if next_page < user_page[message.from_user.id]['count_page']:
        builder_reply.button(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        builder_reply.button(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        builder_reply.button(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

    elif next_page == user_page[message.from_user.id]['count_page']:
        builder_reply.button(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        builder_reply.button(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.message(F.text == "–î–∞–ª–µ–µ")
async def next_page(message: Message):
    page = user_page[message.from_user.id]['page']
    next_page = page + 1
    start_index = page * 50
    stop_index = next_page * 50

    file_name = f"chat_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())

    file_name = f"send_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        send = json.loads(file.read())
    
    for chat in js[start_index:stop_index]:
        text = ''
        builder = InlineKeyboardBuilder()
        if chat["verif"]:
            text += f'{chat["name"]}üëç\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            send.append(str(chat['id']))
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"approve_{chat['id']}")
        else:
            text += f'{chat["name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{chat['id']}")
        await message.answer(text, reply_markup=builder.as_markup())

    file_name = f"send_{message.from_user.id}.json"
    with open(file_name, 'w+') as file:
        file.write(json.dumps(send))

    builder_reply = ReplyKeyboardBuilder()
    user_page[message.from_user.id] = {'page' : next_page, 'count_page': len(js) // 50 + 1}
    if next_page < user_page[message.from_user.id]['count_page']:
        builder_reply.button(text="–ù–∞–∑–∞–¥")
        builder_reply.button(text="–†–∞–∑–æ—Å–ª–∞—Ç—å")
        builder_reply.button(text="–î–∞–ª–µ–µ")

    elif next_page == user_page[message.from_user.id]['count_page']:
        builder_reply.button(text="–ù–∞–∑–∞–¥")
        builder_reply.button(text="–†–∞–∑–æ—Å–ª–∞—Ç—å")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.message(F.text == "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def prepage_handler(message: Message):
    page = user_page[message.from_user.id]['page']
    prev_page = page - 1
    stop_index = page * 50
    start_index = prev_page * 50

    file_name = f"contacts_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    
    for contact in js[start_index:stop_index]:
        text = ''
        builder = InlineKeyboardBuilder()
        if contact["verif"] == "+":
            text += f'{contact["first_name"]}üëç\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"success_{contact['contact_id']}")
        else:
            text += f'{contact["first_name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {contact["last_mess"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"not_success_{contact['contact_id']}")
        await message.answer(text, reply_markup=builder.as_markup())

    builder_reply = ReplyKeyboardBuilder()
    user_page[message.from_user.id] = {'page' : prev_page, 'count_page': len(js) // 50 + 1}
    if not prev_page == 1:
        builder_reply.button(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        builder_reply.button(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        builder_reply.button(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    else:
        builder_reply.button(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        builder_reply.button(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def next_page(message: Message):
    page = user_page[message.from_user.id]['page']
    prev_page = page - 1
    stop_index = page * 50
    start_index = prev_page * 50

    file_name = f"chat_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        js = json.loads(file.read())
    
    for chat in js[start_index:stop_index]:
        text = ''
        builder = InlineKeyboardBuilder()
        if chat["verif"]:
            text += f'{chat["name"]}‚úÖ\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"approve_{chat['id']}")
        else:
            text += f'{chat["name"]}ü§î\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat["last_mes"]}\n\n'
            builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{chat['id']}")
        await message.answer(text, reply_markup=builder.as_markup())

    builder_reply = ReplyKeyboardBuilder()
    user_page[message.from_user.id] = {'page' : next_page, 'count_page': len(js) // 50 + 1}
    if not prev_page == 1:
        builder_reply.button(text="–ù–∞–∑–∞–¥")
        builder_reply.button(text="–†–∞–∑–æ—Å–ª–∞—Ç—å")
        builder_reply.button(text="–î–∞–ª–µ–µ")

    else:
        builder_reply.button(text="–†–∞–∑–æ—Å–ª–∞—Ç—å")
        builder_reply.button(text="–î–∞–ª–µ–µ")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=builder_reply.as_markup(resize_keyboard=True))

@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_approve_mess(message: Message, state: FSMContext):
    file_name = f"send_contacts_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        send = json.loads(file.read())
    if not send == []:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ")
        await state.set_state(MultiAnswer.msg)
    else:
        text = f"{hbold('–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')}\n"
        await message.reply(text, reply_markup=await menu_btn(), parse_mode="HTML")

@dp.message(F.text == "–†–∞–∑–æ—Å–ª–∞—Ç—å")
async def callbacks_approve(message: Message, state: FSMContext):
    file_name = f"send_{message.from_user.id}.json"
    with open(file_name, 'r') as file:
        send = json.loads(file.read())
    if not send == []:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞")
        await state.set_state(SendText.send_text)
    else:
        text = f"{hbold('–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')}\n"
        await message.reply(text, reply_markup=await menu_btn(), parse_mode="HTML")

@dp.message(SendText.send_text)
async def send_text(message: Message, state: FSMContext) -> None: 
    await message.reply("–û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
    new_thread = Thread(target=send_to_chats, args=(message.from_user.id,message.text,))
    new_thread.start()
    new_thread.join()
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ—á–Ω–µ–Ω–∞!", reply_markup=await menu_btn())

async def menu_btn():
    builder = ReplyKeyboardBuilder()
    btn1 = KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    builder.row(btn1)
    btn2 = KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º")
    btn3 = KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–∞—Ç—ã")
    builder.row(btn2, btn3)
    return builder.as_markup(resize_keyboard=True)  

async def back_btn():
    builder = ReplyKeyboardBuilder()
    btn = KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    builder.row(btn)
    return builder.as_markup(resize_keyboard=True) 

async def check_result(user_name):
    file_name_true = f'{user_name}_true.json'
    file_name_false = f'{user_name}_false.json'
    file_name_flood = f'{user_name}_flood.json'
    while True:
        for file in os.listdir(os.path.abspath(os.curdir)+ '/session'):
            if file == file_name_true:
                return True    
            elif file == file_name_false:
                return False
            elif file == file_name_flood:
                return "Flood"
            time.sleep(0.5)

async def create_btn():
    builder = InlineKeyboardBuilder()
    for i in range(1,10):
        builder.button(text=str(i), callback_data=str(i))
    builder.button(text=str(0), callback_data=str(0))
    builder.adjust(5)
    return builder.as_markup()

def send_to_chats(tg_id, text):
    asyncio.run(client.spam_to_chat(tg_id, text))

def chats(tg_id, all_chats):
    asyncio.run(client.get_chats(tg_id, all_chats))

def spam(tg_id):
    asyncio.run(client.first_connect(tg_id))

async def start() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start())
